<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Copyright (c) 2023-2025 Yegor Bugayenko
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
-->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:e="ebnf2antlr" xmlns:g="http://www.w3.org/2001/03/XPath/grammar" id="to-ebnf" version="2.0">
  <xsl:param name="specials" as="xs:string"/>
  <xsl:param name="margin" as="xs:integer"/>
  <xsl:output method="text" encoding="UTF-8"/>
  <xsl:function name="e:escape" as="xs:string">
    <xsl:param name="s" as="xs:string"/>
    <xsl:variable name="r0" select="$s"/>
    <xsl:variable name="r1" select="replace($r0, '\\', '\\textbackslash{}')"/>
    <xsl:variable name="r2" select="replace($r1, '\{', '\\char`\\{')"/>
    <xsl:variable name="r3" select="replace($r2, '\}', '\\char`\\}')"/>
    <xsl:variable name="r4" select="replace($r3, '&amp;', '\\&amp;')"/>
    <xsl:variable name="r5" select="replace($r4, ' ', '\\textvisiblespace{}')"/>
    <xsl:variable name="r6" select="replace($r5, '\^', '\\^{}')"/>
    <xsl:variable name="r7" select="replace($r6, '\$', '\\textdollar')"/>
    <xsl:variable name="r8" select="replace($r7, '#', '\\#')"/>
    <xsl:variable name="r9" select="replace($r8, '_', '\\_')"/>
    <xsl:variable name="r10" select="replace($r9, '&quot;', '\\textquotedbl{}')"/>
    <xsl:variable name="r11" select="replace($r10, &quot;'&quot;, '\\textquotesingle{}')"/>
    <xsl:value-of select="$r11"/>
  </xsl:function>
  <xsl:function name="e:term" as="xs:string">
    <xsl:param name="t" as="xs:string"/>
    <xsl:variable name="s" select="tokenize($specials, ',')"/>
    <xsl:variable name="r">
      <xsl:choose>
        <xsl:when test="index-of($s, $t)">
          <xsl:text>'</xsl:text>
          <xsl:value-of select="upper-case($t)"/>
          <xsl:text>'</xsl:text>
        </xsl:when>
        <xsl:otherwise>
          <xsl:text>&lt;</xsl:text>
          <xsl:value-of select="$t"/>
          <xsl:text>&gt;</xsl:text>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:value-of select="$r"/>
  </xsl:function>
  <xsl:template match="g:grammar">
    <xsl:element name="ebnf">
      <xsl:text>% This file was auto-generated by XMIRTest on </xsl:text>
      <xsl:value-of select="current-dateTime()"/>
      <xsl:value-of select="'&#10;'"/>
      <xsl:text>% Use native-enbf LaTeX package to render this: https://ctan.org/pkg/naive-ebnf</xsl:text>
      <xsl:value-of select="'&#10;'"/>
      <xsl:text>% margin: </xsl:text>
      <xsl:value-of select="$margin"/>
      <xsl:value-of select="'&#10;'"/>
      <xsl:variable name="s" select="tokenize($specials, ',')"/>
      <xsl:if test="not(empty($s))">
        <xsl:text>% </xsl:text>
        <xsl:text> specials (</xsl:text>
        <xsl:value-of select="count($s)"/>
        <xsl:text>): </xsl:text>
        <xsl:value-of select="string-join($s, ', ')"/>
        <xsl:value-of select="'&#10;'"/>
      </xsl:if>
      <xsl:apply-templates select="g:production[not(index-of($s, @name))]"/>
    </xsl:element>
  </xsl:template>
  <xsl:template match="g:production">
    <xsl:value-of select="e:term(e:escape(@name))"/>
    <xsl:text> := </xsl:text>
    <xsl:apply-templates select="g:*"/>
    <xsl:text> \\</xsl:text>
    <xsl:value-of select="'&#10;'"/>
  </xsl:template>
  <xsl:template match="g:optional">
    <xsl:text> [ </xsl:text>
    <xsl:apply-templates select="g:*"/>
    <xsl:text> ] </xsl:text>
  </xsl:template>
  <xsl:template match="g:zeroOrMore">
    <xsl:text> { </xsl:text>
    <xsl:apply-templates select="g:*"/>
    <xsl:text> } </xsl:text>
  </xsl:template>
  <xsl:template match="g:oneOrMore">
    <xsl:text> { </xsl:text>
    <xsl:apply-templates select="g:*"/>
    <xsl:text> }+ </xsl:text>
  </xsl:template>
  <xsl:template match="g:sequence">
    <xsl:if test="count(g:*) &gt; 1">
      <xsl:text> ( </xsl:text>
    </xsl:if>
    <xsl:apply-templates select="g:*"/>
    <xsl:if test="count(g:*) &gt; 1">
      <xsl:text> ) </xsl:text>
    </xsl:if>
  </xsl:template>
  <xsl:function name="e:textualize">
    <xsl:param name="node" as="node()"/>
    <xsl:variable name="txt">
      <xsl:value-of select="string-join($node//text()[normalize-space(.)!=''], ' ')"/>
      <xsl:value-of select="$node/@name"/>
    </xsl:variable>
    <xsl:value-of select="$txt"/>
  </xsl:function>
  <xsl:template match="g:choice">
    <xsl:choose>
      <xsl:when test="ancestor::g:production[count(child::*) = 1]">
        <xsl:for-each select="g:*">
          <xsl:variable name="before">
            <xsl:for-each select="preceding-sibling::*">
              <xsl:value-of select="e:textualize(.)"/>
            </xsl:for-each>
          </xsl:variable>
          <xsl:variable name="after">
            <xsl:value-of select="$before"/>
            <xsl:value-of select="e:textualize(.)"/>
          </xsl:variable>
          <xsl:if test="position() &gt; 1">
            <xsl:choose>
              <xsl:when test="ceiling(string-length($after) div $margin) &gt; ceiling(string-length($before) div $margin)">
                <xsl:text>\\</xsl:text>
                <xsl:value-of select="'&#10;'"/>
                <xsl:text>   || </xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text> | </xsl:text>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:if>
          <xsl:apply-templates select="."/>
        </xsl:for-each>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text> ( </xsl:text>
        <xsl:for-each select="g:*">
          <xsl:if test="position() &gt; 1">
            <xsl:text> | </xsl:text>
          </xsl:if>
          <xsl:apply-templates select="."/>
        </xsl:for-each>
        <xsl:text> ) </xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  <xsl:template match="g:string">
    <xsl:for-each select="tokenize(., '(?=&quot;)', ';j')">
      <xsl:choose>
        <xsl:when test=". = ''">
          <!-- ignore it -->
        </xsl:when>
        <xsl:when test=". = '&quot;'">
          <xsl:text> 'DQ' </xsl:text>
        </xsl:when>
        <xsl:otherwise>
          <xsl:text> "</xsl:text>
          <xsl:value-of select="e:escape(.)"/>
          <xsl:text>" </xsl:text>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:for-each>
  </xsl:template>
  <xsl:template match="g:complement">
    <xsl:apply-templates select="g:*"/>
  </xsl:template>
  <xsl:template match="g:charClass">
    <xsl:text> /[</xsl:text>
    <xsl:if test="ancestor::g:complement">
      <xsl:text>\^{}</xsl:text>
    </xsl:if>
    <xsl:apply-templates select="g:*"/>
    <xsl:text>]/ </xsl:text>
  </xsl:template>
  <xsl:template match="g:charRange">
    <xsl:value-of select="@minChar"/>
    <xsl:text>-</xsl:text>
    <xsl:value-of select="@maxChar"/>
  </xsl:template>
  <xsl:template match="g:charCode">
    <xsl:variable name="txt">
      <xsl:text>\textbackslash{}</xsl:text>
      <xsl:choose>
        <xsl:when test="@value = '9'">
          <xsl:text>t</xsl:text>
        </xsl:when>
        <xsl:when test="upper-case(@value) = 'A'">
          <xsl:text>n</xsl:text>
        </xsl:when>
        <xsl:when test="upper-case(@value) = 'D'">
          <xsl:text>r</xsl:text>
        </xsl:when>
        <xsl:otherwise>
          <xsl:text>x</xsl:text>
          <xsl:value-of select="upper-case(@value)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:choose>
      <xsl:when test="ancestor::g:charClass">
        <xsl:value-of select="$txt"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>"</xsl:text>
        <xsl:value-of select="$txt"/>
        <xsl:text>"</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  <xsl:template match="g:char">
    <xsl:value-of select="e:escape(text())"/>
  </xsl:template>
  <xsl:template match="g:ref">
    <xsl:text> </xsl:text>
    <xsl:choose>
      <xsl:when test="matches(@name, '^[A-Z].*')">
        <xsl:text>'</xsl:text>
        <xsl:value-of select="e:escape(@name)"/>
        <xsl:text>'</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="e:term(e:escape(@name))"/>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:text> </xsl:text>
  </xsl:template>
</xsl:stylesheet>
